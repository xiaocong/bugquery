Transport layer:
SSL(https)

Account:
Mantis Account(all,borqsbt1,borqsbt2,borqsbtx)
New Account(No auto register function)


Deletion control.

UUID as token


token management:
generate
store
check
expired



Web app refactor for access control

Product

数据库访问密码：
要给两个数据库都加上访问密码，外部访问只能通过与数据库交互的程序。
数据库的密码写在配置文件里，不要写在代码里。
如果假定局域网内是可信任的环境，程序访问数据库也可以不用密码。

权限划分：
Manufactor/Product

对某些接口，限定特定的用户帐号

由一个单独的程序负责权限控制，brstore和brquery的所有请求都要先通过这个程序的检查。
接口可以这样定义：
auth(user,password,manufacturer,product)
return:成功：token,失败：

auth(token,manufacturer,product)
return:成功：True,失败：False


brquery如何检查？
1。对查询条件里的Product进行检查，如果有manufacturer，也要检查，条件相与。
2。把结果集合与相应产品的集合做交集（性能？）
查询条件:android.os.build.Device换成android.os.build.PRODUCT
取出查询条件里的Manufacturer和Product,与用户信息一起送到brauth做认证。
如果没有厂商和产品的指定。则根据用户信息，向brauth查询用户有权访问的产品列表，对结果集做与操作。

对统计信息如何检查权限控制？


brstore如何检查？
1。对查询条件里的Product进行检查，如果有manufacturer，也要检查，条件相与。use case: 查询条件是A厂商和B厂商的C产品，就需要检查用户是否有对C的访问权限。
2. 限定用户



Mantis里的project与BugReporter server上的product做一个对应关系。



brauth
数据存在MongoDB里


还是用数字做id占用空间小。

common_id:{name:"common_id",next:int}
token_id:{name:"token_id",next:int}

manufacturer:{_id:int,name:string}
product:{_id:int,name:string,m_id:int}

user:{_id:int,name:string,password:string}//use hashlib.md5().update().digest()
user_right:{_id:int,u_id:int,m_id:[1,3,5],p_id:[2,4,6]}//nanufacturer_id和product_id不一定始终存在。

帐号管理：
可以使用Mantis帐号:选项包括：1.account for all mantis 2.account for borqsbt 3. account for borqsbt2 4.account for borqsbtx 
帐号格式：b999@borqs or b999@borqsbt or b999@borqsbtx
帐号通过mantis验证后，获得相应project权限，转换成对应product的权限，分别保存到user和user_right。
下次登录验证时仍然首先向mantis寻求验证，成功后依然保存。(mantis不通才使用自己的存储数据。<--这个暂时不实现)
使用BugReporter自己的帐号：可用字符：字母数字，不允许出现@
直接自己验证。


token:{_id:int,token:string,u_id:int,expire:time}
token管理：用独立的id，id如何归零？如果有过期时间很长的条目，怎么办？

//如果记录Mantis密码，在Mantis上修改了怎么办？
如果manufacturer增加了一个产品，那么之前拥有对该Manufacturer访问权限的用户如何自动增加对该产品的访问权限？

product_mapping:{_id,mantis_project,p_id，server_name}//这个对应关系找谁确认?

brauth:初始化，维护，使用

初始化：
厂商和产品表需要事先创建
产品映射表需要事先创建

counter，user,user_right,token都是动态创建，甚至删除。

除非有用户需要创建新帐号。如何处理初始密码，密码重置，修改密码？首先手动初始化


使用：用户是bugquery,brstore,brquery
提供帐号，密码，请求授权。（返回令牌或者错误信息）
提供令牌，查询相应权限列表（产品列表）（返回令牌无效或者产品列表）
提供令牌，产品名称，查询是否有访问权限。（返回令牌无效或者查询结果）


管理维护：
添加帐号，设置权限
查询帐号对应的权限
修改帐号对应的权限



问题：
1.密码如何保存？
安全的方法是在数据库中保存单向加密后的密文，比如md5算法处理过的密文。但是用户名密码在调用Mantis的
SOAP接口时也要用到，如何缓存？在浏览器缓存还是server直接存明文密码？



2012/05/11
1. 如何准确标识一个产品？考虑综合判断，结合：android.os.build.DEVICE,PRODUCAT,MODOLE
2. 权限划分是否可以细化到某个产品的某个应用？不，权限的最小单位是产品。
3. Manufacturer是制造商。//去掉Manufacturer的概念吧，这个有点儿混乱。



2012/05/15
调整权限系统结构，去掉Manufacturer的概念，只保留产品的概念。

新的表结构是：
id_common:{name:"common",next:int}//Integer id generator for the tables except for token.
id_token:{name:"token",next:int}//Integer id generator for the table token.

product:{_id:int,name:string}
mapping:{_id,mantis_project,p_id，server_name}

admin:{name:String,password:md5_str}#product,mapping,
user:{_id:int,name:string,password:string}//use hashlib.md5().update().digest()
rights:{u_id:int,p_id:[2,4,6],deletion:boolean}

token:{_id:int,token:string,u_id:int,expire:time}





所有的权限检查都在brquery进行，通过集合的交并集完成。（数据量很大时的性能？）
包括单个和多个。
brstore只检查用户。

在brauth中建立brstore和brquery帐号。











